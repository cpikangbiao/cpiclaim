entity CpiInsuranceType {
	sortNum Integer  ,
	cpiInsuranceTypeName String required ,
}

entity CaseSettlementMode {
	sortNum Integer  ,
	settlementModeName String required ,
}

entity CaseStatusType {
	sortNum Integer  ,
	caseStatusName String required ,
}

entity VesselCase {
	numberId Integer required ,
	caseYear String  ,
	insuredVesselId Long required ,
	companyName String  ,
	vesselName String  ,
	companyChineseName String  ,
	vesselChineseName String  ,
	reinsureId Long  ,
	deduct BigDecimal  ,
	assignedHandler Long  ,
	assignedTime Instant  ,
	registeredHandler Long  ,
	registeredDate Instant  ,
	caseCode String required ,
	caseDate Instant  ,
	caseLocation Long  ,
	caseDescription String  ,
	voyageNo String  ,
	loadingPort Long  ,
	loadingDate Instant  ,
	dischargingPort Long  ,
	dischargingDate Instant  ,
	limitTime Instant  ,
	cpDate Instant  ,
	cpType String  ,
	arrestVessel String  ,
	jurisdiction Long  ,
	applicableLaw Long  ,
	closeDate Instant  ,
	closeHandler Long  ,
	remark TextBlob  ,
	settlementAmount BigDecimal  ,
	settlementDate Instant  ,
}

relationship ManyToOne {
	VesselCase{cpiInsuranceType(cpiInsuranceTypeName)} to CpiInsuranceType
}

relationship ManyToOne {
	VesselCase{caseStatus(caseStatusName)} to CaseStatusType
}

relationship ManyToOne {
	VesselCase{settlementMode(settlementModeName)} to CaseSettlementMode
}


entity RiskGroup {
	sortNum Integer  ,
	RiskGroupName String required ,
}


entity Risk {
	sortNum Integer  ,
	tclType Boolean  ,
	piType Boolean  ,
	riskName String  ,
	riskNameChinese String  ,
	riskNameEnglish String  ,
	riskNameEnglishAbbr String  ,
}


relationship ManyToOne {
	Risk{riskGroup(riskGroupName)} to RiskGroup
}


entity VesselSubCase {
	numberId Integer  ,
	assignedUserId Long  ,
	insertTime Instant  ,
	subcaseCode String  ,
	blNo String  ,
	claimant String  ,
	claimAmount String  ,
	currency Long  ,
	deductible BigDecimal  ,
	currencyRate Double  ,
	deductDollar BigDecimal  ,
	remark TextBlob  ,
}

relationship ManyToOne {
	VesselSubCase{vesselCase(caseCode)} to VesselCase
}

relationship ManyToOne {
	VesselSubCase{risk(riskName)} to Risk
}



entity CaseEstimate {
	numberId Integer  ,
	registerUserId Long  ,
	estimateDate Instant  ,
	estimateEntityFee BigDecimal  ,
	estimateCostFee BigDecimal  ,
	remark TextBlob  ,
}

relationship ManyToOne {
	CaseEstimate{subcase(subcaseCode)} to VesselSubCase
}

entity CaseClaim {
 	numberId Integer  ,
 	claimer String  ,
 	claimDate Instant  ,
 	billOfLading String  ,
 	currencyId Long  ,
 	currencyRate Double  ,
 	claimCost BigDecimal  ,
 	claimCostDollar BigDecimal  ,
 	remark TextBlob  ,
 }

relationship ManyToOne {
 	CaseClaim{subcase(subcaseCode)} to VesselSubCase
}

entity Creditor {
	creditorCode String  ,
	creditorName String  ,
	creditorAddress String  ,
	portName String  ,
	swiftCode String  ,
	ibanCode String  ,
	bankName String  ,
	bankAddress String  ,
	accountNo String  ,
	corrBankName String  ,
	corrBankAddress String  ,
	corrBankName2 String  ,
	corrBankAddress2 String  ,
}

entity CasePayment {
	clientNo String  ,
	numberId Integer  ,
	payCostDate Instant  ,
	currency Long  ,
	currencyRate Double  ,
	payCost BigDecimal  ,
	payCostDollar BigDecimal  ,
	deduct BigDecimal  ,
	amount BigDecimal  ,
	feeCreateUser Long  ,
	feeCreateDate Instant  ,
	remark TextBlob  ,
}

relationship ManyToOne {
	CasePayment{subcase(subcaseCode)} to VesselSubCase
}

relationship ManyToOne {
	CasePayment{creditor(creditorCode)} to Creditor
}

entity RecoveryType {
	sortNum Integer  ,
	recoveryTypeName String required ,
}


entity CaseRecovery {
	clientNo String  ,
	numberId Integer  ,
	currency Long  ,
	currencyRate Double  ,
	issueDate Instant  ,
	issueAmount BigDecimal  ,
	receivedDate Instant  ,
	receivedAmount BigDecimal  ,
	amountDollar BigDecimal  ,
	registerDate Instant  ,
	registerUser Long  ,
	remark TextBlob  ,
 }

relationship ManyToOne {
	CaseRecovery{subcase(subcaseCode)} to VesselSubCase
}

relationship ManyToOne {
	CaseRecovery{recoveryType(recoveryTypeName)} to RecoveryType
}

relationship ManyToOne {
	CaseRecovery{creditor(creditorCode)} to Creditor
}


entity FeeType {
	sortNum Integer  ,
	feeTypeName String required ,
}

entity CaseFee {
	clientNo String  ,
	numberId Integer  ,
	currency Long  ,
	currencyRate Double  ,
	feeCostDate Instant  ,
	feeCost BigDecimal  ,
	feeCostDollar BigDecimal  ,
	deduct BigDecimal  ,
	deductCurrency Long  ,
	deductCurrencyRate Double  ,
	deductAmount BigDecimal  ,
	amountDollar BigDecimal  ,
	feeCreateUser Long  ,
	feeCreateDate Instant  ,
	remark TextBlob  ,
	isSigned Boolean  ,
	signUser Long  ,
	signDate Long  ,
	processId Long  ,
}

relationship ManyToOne {
	CaseFee{feeType(feeTypeName)} to FeeType
}

relationship ManyToOne {
	CaseFee{subcase(subcaseCode)} to VesselSubCase
}

relationship ManyToOne {
	CaseFee{creditor(creditorCode)} to Creditor
}

// Set pagination options
//paginate PartnerType with infinite-scroll
paginate * with pagination

dto * with mapstruct

//Set service options to all except few
service * with serviceImpl //except PartnerType

filter * //except PartnerType


microservice * with cpiclaim
