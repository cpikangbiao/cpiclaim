entity CpiInsuranceType {
	sortNum Integer  ,
	cpiInsuranceTypeName String required ,
}

entity CaseSettlementMode {
	sortNum Integer  ,
	settlementModeName String required ,
}

entity CaseStatusType {
	sortNum Integer  ,
	caseStatusName String required ,
}

entity VesselCase {
	numberId Integer required ,
	caseYear String  ,
	insuredVesselId Long required ,
	companyName String  ,
	vesselName String  ,
	companyChineseName String  ,
	vesselChineseName String  ,
	reinsureId Long  ,
	deduct BigDecimal  ,
	assignedHandler Long  ,
	assignedTime Instant  ,
	registeredHandler Long  ,
	registeredDate Instant  ,
	caseCode String required ,
	caseDate Instant  ,
	caseLocation Long  ,
	caseDescription String  ,
	voyageNo String  ,
	loadingPort Long  ,
	loadingDate Instant  ,
	dischargingPort Long  ,
	dischargingDate Instant  ,
	limitTime Instant  ,
	cpDate Instant  ,
	cpType String  ,
	arrestVessel String  ,
	jurisdiction Long  ,
	applicableLaw Long  ,
	closeDate Instant  ,
	closeHandler Long  ,
	remark TextBlob  ,
	settlementAmount BigDecimal  ,
	settlementDate Instant  ,
}

relationship ManyToOne {
	VesselCase{cpiInsuranceType(cpiInsuranceTypeName)} to CpiInsuranceType
}

relationship ManyToOne {
	VesselCase{caseStatus(caseStatusName)} to CaseStatusType
}

relationship ManyToOne {
	VesselCase{settlementMode(settlementModeName)} to CaseSettlementMode
}


entity RiskGroup {
	sortNum Integer  ,
	RiskGroupName String required ,
}


entity Risk {
	sortNum Integer  ,
	tclType Boolean  ,
	piType Boolean  ,
	riskName String  ,
	riskNameChinese String  ,
	riskNameEnglish String  ,
	riskNameEnglishAbbr String  ,
}


relationship ManyToOne {
	Risk{riskGroup(riskGroupName)} to RiskGroup
}


entity VesselSubCase {
	numberId Integer  ,
	assignedUserId Long  ,
	insertTime Instant  ,
	subcaseCode String  ,
	blNo String  ,
	claimant String  ,
	claimAmount String  ,
	currency Long  ,
	deductible BigDecimal  ,
	currencyRate Double  ,
	deductDollar BigDecimal  ,
	remark TextBlob  ,
}

relationship ManyToOne {
	VesselSubCase{vesselCase(caseCode)} to VesselCase
}

relationship ManyToOne {
	VesselSubCase{risk(riskName)} to Risk
}


// Set pagination options
//paginate PartnerType with infinite-scroll
paginate * with pagination

dto * with mapstruct

//Set service options to all except few
service * with serviceImpl //except PartnerType

filter * //except PartnerType


microservice * with cpiclaim
